#!/bin/bash

# common header for test scripts

DIR=$(cd `dirname $0` && pwd)

RDURL=${1:-http://loadbalancer:80/rundeckpro-dr}


project="testproject"
jobid="32fdf559-65fe-4c51-abe0-4c3d1b51d610"

# modify to point to xmlstarlet
XMLSTARLET=${XMLSTARLET:-xmlstarlet}

API_CURRENT_VERSION=17
API_VERSION=${API_VERSION:-$API_CURRENT_VERSION}

APIURL="${RDURL}/api/${API_VERSION}"
CUR_APIURL="${RDURL}/api/${API_CURRENT_VERSION}"

errorMsg() {
   echo "$*" 1>&2
}

# curl opts to use a cookie jar, and follow redirects, showing only errors
if [ -n "$RDAUTH" ] ; then 
    AUTHHEADER="X-RunDeck-Auth-Token: $RDAUTH"
    CURLOPTS="-s -S -L"
else
    CURLOPTS="-s -S -L -c $DIR/cookies -b $DIR/cookies"
fi

if [ -z "$API_XML_NO_WRAPPER" ] ; then
    CURLOPTS="$CURLOPTS -H X-Rundeck-API-XML-Response-Wrapper:true"
fi

if [ -n "$DEBUG" ] ; then
    CURLOPTS="$CURLOPTS -v"
fi

CURL="curl $CURLOPTS"
docurl(){
    if [ -n "${RDAUTH:-}" ] ; then
        if [ "true" == "${RDDEBUG:-}" ] ; then
            echo $CURL -H "${AUTHHEADER:-}" "$@" 1>&2
        fi
        $CURL -H "${AUTHHEADER:-}" "$@"
    else    
        $CURL "$@"
    fi
}

clean(){
    echo "cleaning data generated by previous tests"

    if [ -f $DIR/cookies ]; then
        rm $DIR/cookies
    fi

    if [ -f $DIR/curl.out ]; then
        rm $DIR/curl.out
    fi

    if [ -f $DIR/headers.out ]; then
        rm $DIR/headers.out
    fi

    find $HOME/testdata/ -type f -iname '*created_by*' -delete
}

login(){
    loginurl="${RDURL}/j_security_check"

    # curl opts to use a cookie jar, and follow redirects, showing only errors
    CURLOPTS="-s -S -L -c $DIR/cookies -b $DIR/cookies"
    CURL="curl $CURLOPTS"

    # get main page for login
    RDUSER=${2:-"admin"}
    RDPASS=${3:-"admin"}
    echo "Login... to $loginurl "
    $CURL $RDURL > $DIR/curl.out
    if [ 0 != $? ] ; then
        errorMsg "failed login request to ${loginurl}"
        exit 2
    fi

    $CURL -X POST -d j_username=$RDUSER -d j_password=$RDPASS $loginurl > $DIR/curl.out
    if [ 0 != $? ] ; then
        errorMsg "failed login request to ${loginurl}"
        exit 2
    fi

    grep 'j_security_check' -q $DIR/curl.out
    if [ 0 == $? ] ; then
        errorMsg "login was not successful: ${loginurl}"
        exit 2
    fi
}

import_job_to_project(){
    runurl="${APIURL}/jobs/import"

    echo "TEST: import RunDeck Jobs in jobs.xml format (multipart request)"

    params="project=$project"

    # specify the file for upload with curl, named "xmlBatch"
    ulopts="-F xmlBatch=@$DIR/xmls/job-example.xml"

    # get listing
    docurl $ulopts  ${runurl}?${params} > $DIR/curl.out
    if [ 0 != $? ] ; then
        errorMsg "ERROR: failed query request"
        exit 2
    fi
}

delete_job(){
    echo "deleting job"
    runurl="${APIURL}/job/${jobid}"
    params=""

    #dont' allow redirects, remove -L
    if [ -n "$RDAUTH" ] ; then
        CURLOPTS="-s -S"
    else
        CURLOPTS="-s -S -c $DIR/cookies -b $DIR/cookies"
    fi
    CURL="curl $CURLOPTS"

    # get listing
    $CURL -D $DIR/headers.out -H "$AUTHHEADER" -X DELETE ${runurl}?${params} > $DIR/curl.out
    if [ 0 != $? ] ; then
        errorMsg "ERROR: failed query request"
        exit 2
    fi
}


clean
login
import_job_to_project
